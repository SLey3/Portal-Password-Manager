"""
Generator Module for Password Manager
"""
# Imports
from passwordmeter import test
from random import choice, randint
import string_utils

# Generator
words = open('words.txt', 'r').read().split('\n')
special_chars = ['!', '?', '%', '$', '*', '(', ')', '&', '@', '#', '^', '+', '=', '-', '_', '"', ';', ':', '<', '>', '/', '\\']
uppercase_letters = ['A','B','C','D','E','F','G','H','I','J','K','L''M','N', 'O', 'P','Q','R','S','T','U','V','W','X','Y','Z']

def create_password(num_words, num_numbers, num_special, num_uppercase_words, char_limit, strengthen = False):
    """
    Generates Pasword from words, Uppercase letters, special chars, and numbers with the options of:
    :param num_words: Number of Words in password.
    :param num_numbers: Number of numbers in password.
    :param num_special: Number of Special Characters in password.
    :param num_uppercase_words: Number of uppercase words in password.
    :param char_limit: Limit of characters in password.
    :param Strengthen: Strengthens the password.
    """
    pass_str = ''.join(
        [choice(words).lower().capitalize() for _ in range(num_words)] + 
        [str(randint(0,100)) for _ in range(num_numbers)] + 
        [choice(special_chars) for _ in range(num_special)] + 
        [choice(uppercase_letters) for _ in range(num_uppercase_words)]
    )

    if strengthen:
        pass_str = string_utils.shuffle(pass_str)
        pass_str = pass_str.replace(' ', '')

    if char_limit > 0:
        pass_str = pass_str[:char_limit]

    return pass_str
         
def show_created_password(pass_str):
    """
    Shows password generated by generator
    """
    strength,_=test(pass_str)
    #TODO make print statements into wx form in the mainapp.py file or through a different wx method
    print("Password: {:s}".format(pass_str))
    print("Strength: {:0.5f}".format(strength))